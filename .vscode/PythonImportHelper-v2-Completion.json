[
    {
        "label": "Form",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "StringField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "TextAreaField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "SelectField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "validators",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "save_order",
        "importPath": "app.utils",
        "description": "app.utils",
        "isExtraImport": true,
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "flask_testing",
        "description": "flask_testing",
        "isExtraImport": true,
        "detail": "flask_testing",
        "documentation": {}
    },
    {
        "label": "ContactForm",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class ContactForm(Form):\n    name = StringField(\n        'Name', [validators.Length(min=1, max=50), validators.DataRequired()])\n    phone = StringField(\n        'Phone', [validators.Length(min=6, max=20), validators.DataRequired()])\n    email = StringField(\n        'Email', [validators.Length(min=6, max=50), validators.Email(), validators.DataRequired()])\n    inquiryType = SelectField(\n        'Inquiry Type', choices=[('general', 'General Inquiry'), ('sales', 'Sales'), ('support', 'Support'), ('other', 'Other')], validators=[validators.DataRequired()])\n    county = SelectField(",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "get_product_by_id",
        "kind": 2,
        "importPath": "app.products_data",
        "description": "app.products_data",
        "peekOfCode": "def get_product_by_id(product_id):\n    \"\"\" Function to retrieve data about a specific product by its ID\"\"\"\n    for product in products:\n        if product['id'] == product_id:\n            return product\n    return None",
        "detail": "app.products_data",
        "documentation": {}
    },
    {
        "label": "products",
        "kind": 5,
        "importPath": "app.products_data",
        "description": "app.products_data",
        "peekOfCode": "products = [\n    {\n        \"id\": 1,\n        \"name\": \"Wooden shed Begonia\",\n        \"description\": \"High-quality wooden sheds are structures that embody both functionality and aesthetic appeal. \",\n        \"image\": \"images/sheds/product1.jpg\",\n        \"base_price\": 1000,  # Base price for the product\n        \"options\": {\n            \"sizes\": [\n                {\"id\": 1, \"name\": \"6x8 (182cm x 243cm)\", \"additional_price\": 0},",
        "detail": "app.products_data",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "app.routes",
        "description": "app.routes",
        "peekOfCode": "def home():\n    # Additional logic for POST requests can be added here\n    return render_template('index.html')\n# Route to handle the contact form submission\n@app.route('/contact', methods=['GET', 'POST'])\ndef contact():\n    form = ContactForm(request.form)\n    if request.method == 'POST' and form.validate():\n        data = form.data\n        save_to_json(data)  # Saving the form data to a JSON file",
        "detail": "app.routes",
        "documentation": {}
    },
    {
        "label": "contact",
        "kind": 2,
        "importPath": "app.routes",
        "description": "app.routes",
        "peekOfCode": "def contact():\n    form = ContactForm(request.form)\n    if request.method == 'POST' and form.validate():\n        data = form.data\n        save_to_json(data)  # Saving the form data to a JSON file\n        return redirect(url_for('contact.html'))\n    return render_template('contact.html', form=form)\n# Route to handle email sending and saving data to a JSON file\n@app.route('/send_email', methods=['POST'])\ndef send_email():",
        "detail": "app.routes",
        "documentation": {}
    },
    {
        "label": "send_email",
        "kind": 2,
        "importPath": "app.routes",
        "description": "app.routes",
        "peekOfCode": "def send_email():\n    # Collecting form data\n    data = {\n        \"name\": request.form.get('name'),\n        \"phone\": request.form.get('phone'),\n        \"email\": request.form.get('email'),\n        \"inquiryType\": request.form.get('inquiryType'),\n        \"county\": request.form.get('county'),\n        \"message\": request.form.get('message')\n    }",
        "detail": "app.routes",
        "documentation": {}
    },
    {
        "label": "faq",
        "kind": 2,
        "importPath": "app.routes",
        "description": "app.routes",
        "peekOfCode": "def faq():\n    return render_template('FAQ.html')\n@app.route(\"/about\")\ndef about():\n    return render_template('about.html', products=products)\n# Route to render the products page\n@app.route(\"/products\")\ndef products_page():\n    return render_template('products.html', products=products)\n# Route to render a specific product detail page",
        "detail": "app.routes",
        "documentation": {}
    },
    {
        "label": "about",
        "kind": 2,
        "importPath": "app.routes",
        "description": "app.routes",
        "peekOfCode": "def about():\n    return render_template('about.html', products=products)\n# Route to render the products page\n@app.route(\"/products\")\ndef products_page():\n    return render_template('products.html', products=products)\n# Route to render a specific product detail page\n@app.route('/product/<int:product_id>')\ndef product_detail(product_id):\n    # Finding a specific product by ID",
        "detail": "app.routes",
        "documentation": {}
    },
    {
        "label": "products_page",
        "kind": 2,
        "importPath": "app.routes",
        "description": "app.routes",
        "peekOfCode": "def products_page():\n    return render_template('products.html', products=products)\n# Route to render a specific product detail page\n@app.route('/product/<int:product_id>')\ndef product_detail(product_id):\n    # Finding a specific product by ID\n    product = get_product_by_id(product_id)\n    if product:\n        return render_template('product_details.html', product=product)\n    else:",
        "detail": "app.routes",
        "documentation": {}
    },
    {
        "label": "product_detail",
        "kind": 2,
        "importPath": "app.routes",
        "description": "app.routes",
        "peekOfCode": "def product_detail(product_id):\n    # Finding a specific product by ID\n    product = get_product_by_id(product_id)\n    if product:\n        return render_template('product_details.html', product=product)\n    else:\n        flash('Product not found!', 'error')\n        return redirect(url_for('products_page'))\n# Route to handle the order placement\n@app.route('/place_order', methods=['POST'])",
        "detail": "app.routes",
        "documentation": {}
    },
    {
        "label": "place_order",
        "kind": 2,
        "importPath": "app.routes",
        "description": "app.routes",
        "peekOfCode": "def place_order():\n    # Collecting order data from form\n    order_data = {\n        \"product_id\": request.form.get('product_id'),\n        \"size\": request.form.get('size'),\n        \"material\": request.form.get('material'),\n        \"roof\": request.form.get('roof'),\n        \"color\": request.form.get('color')\n    }\n    # Saving the order and returning JSON response",
        "detail": "app.routes",
        "documentation": {}
    },
    {
        "label": "submit_review",
        "kind": 2,
        "importPath": "app.routes",
        "description": "app.routes",
        "peekOfCode": "def submit_review():\n    try:\n        # Collecting review data\n        review_data = {\n            \"product_id\": request.form.get('product_id'),\n            \"review\": request.form.get('review'),\n            \"rating\": request.form.get('rating')\n        }\n        # Path to the file storing reviews\n        reviews_file = 'reviews.json'",
        "detail": "app.routes",
        "documentation": {}
    },
    {
        "label": "save_to_json",
        "kind": 2,
        "importPath": "app.utils",
        "description": "app.utils",
        "peekOfCode": "def save_to_json(data, filename='form_data.json'):\n    \"\"\"\"The save_to_json function is a robust Python utility designed for serializing and saving data to a JSON file,\n    while ensuring smooth error handling and logging. It accepts two parameters: the data to be saved and an optional filename,\n    defaulting to 'form_data.json'. The function attempts to open the specified file in write mode and serialize the data into JSON format \n    with neat indentation for readability. If the process succeeds,\n    it logs an informational message and returns True as a confirmation of success. \n    In cases of exceptions, such as file access issues, it catches the error, \n    logs a detailed error message, and returns False to indicate failure. \n    This careful approach to error handling and feedback makes save_to_json a \n    reliable tool for data storage in JSON format, aiding in maintaining data integrity and facilitating debugging.\"\"\"",
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "save_order",
        "kind": 2,
        "importPath": "app.utils",
        "description": "app.utils",
        "peekOfCode": "def save_order(order_data):\n    \"\"\"The save_order function is specifically designed for handling the storage of order data in a JSON file\n    in a thread-safe manner using Python's threading and file handling capabilities. \n    It begins by defining a file path for 'orders.json'. If this file doesn't exist,\n    the function creates it and initializes it with an empty list,\n    ensuring there's a structure in place for storing order data.\n    \"\"\"\n    file_path = 'orders.json'\n    if not os.path.exists(file_path):\n        with open(file_path, 'w') as file:",
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "convert_from_record_to_int",
        "kind": 2,
        "importPath": "app.utils",
        "description": "app.utils",
        "peekOfCode": "def convert_from_record_to_int(record):\n    \"\"\"function is convert data to int\n    \"\"\"\n    data_record = record[0]\n    record_convert_to_int = data_record[0]\n    return int(record_convert_to_int)",
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "FlaskTestCase",
        "kind": 6,
        "importPath": "tests.test_email_form",
        "description": "tests.test_email_form",
        "peekOfCode": "class FlaskTestCase(TestCase):\n    def create_app(self):\n        app.config['TESTING'] = True\n        return app\n    # Тест главной страницы на доступность\n    def test_index_get(self):\n        response = self.client.get('/')\n        self.assertEqual(response.status_code, 200)\n    # Тест отправки данных через форму на главной странице\n    def test_index_post(self):",
        "detail": "tests.test_email_form",
        "documentation": {}
    }
]